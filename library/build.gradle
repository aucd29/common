apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 26
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "2.0.5"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'

    implementation "com.android.support:appcompat-v7:$support_lib"
    implementation "com.android.support:design:$support_lib"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "com.google.android.gms:play-services-ads:$google_service"

    implementation "com.github.tony19:logback-android:$logback"
    implementation "org.slf4j:slf4j-api:$slf4j"
    implementation "com.android.support.constraint:constraint-layout:$constraint"
    implementation "com.squareup.picasso:picasso:$picasso"

    implementation "android.arch.lifecycle:extensions:1.1.1"
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    //archives javadocJar
}

// uncomment to build a jar file in addition to the default aar file
//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    artifacts.add('archives', task);
//}
